DEFINITION MODULE M2Sets;

(*
  This module provides a number of routines to allow the Modula-2 compiler to
  implement bit sets with 17 or more elements.

  The compiler hooks into this module whenever it needs to carry out an 
  operation on a set that is longer than 4 bytes.  Sets of 4 bytes or less can
  be manipulated using the normal operations available through the registers.

  Set Constant operations are handled by procedures beginning with SC.  Those
  procedures simply manipulate a fake set that is actually an array of up to
  16 BITSETS with special consideration to sets that are actually an odd number
  of bytes in length.

  Set operations on variables are handled by procedures beginning with SV. 
  Those procedures generate inline code where possible that will manipulate
  bitsets in memory.

  In theory, when modifying the compiler for another machine, it should be 
  possible to simply re-write the SV procedures to re-implement the large
  sets.
*)

FROM SYSTEM IMPORT BYTE;

(* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *)
(*                        Data Structures for Fake Sets                       *)
(* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *)

TYPE
  aFakeSet =  
    RECORD
      setSize:  CARDINAL; (* # of bytes taken up by the set *)

      CASE :BOOLEAN OF
        TRUE:   set:    ARRAY [0..15] OF BITSET;
      | FALSE:  bytes:  ARRAY [0..31] OF BYTE;
      END;
    END;
  pFakeSet = POINTER TO aFakeSet;

(* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *)
(*                           Set Constant Operations                          *)
(* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *)

PROCEDURE SCClearSet(VAR x: aFakeSet);
(*
  OPERATION:
    Clears the set to an empty set;
*)

PROCEDURE SCComplementSet(VAR x: aFakeSet);
(*
  OPERATION:
    Reverses the state of each bit of the set.
*)

PROCEDURE SCEqual(x, y: aFakeSet): BOOLEAN;
(*
  OPERATION:
    Returns TRUE if the set defined by "x" is the same as that of "y".
*)

PROCEDURE SCIn(bit: CARDINAL; x: aFakeSet): BOOLEAN;
(*
  OPERATION:
    Returns TRUE if the bit specified by "bit" is set in the fakeset "x".
*)

PROCEDURE SCLessEqual(x, y: aFakeSet): BOOLEAN;
(*
  OPERATION:
    Returns TRUE if the set defined by "x" is less than or equal to that of "y".
*)

PROCEDURE SCMinus(VAR x:  aFakeSet; y: aFakeSet);
(*
  OPERATION:
    This procedure carries out the standard M2 set operation for the "-"
    symbol, which is x = AND(x, COM(y)) .
*)

PROCEDURE SCPlus(VAR x:  aFakeSet; y: aFakeSet);
(*
  OPERATION:
    This procedure carries out the standard M2 set operation for the "+"
    symbol, which is OR.

    It ORs the two sets represented by 'x' and 'y', placing the result in 'x'.
*)

PROCEDURE SCSetBit(VAR x: aFakeSet; bit:  CARDINAL);
(*
  OPERATION:
    Sets the specified bit in the set.
*)

PROCEDURE SCSetBitRange(VAR x: aFakeSet; lo, hi:  CARDINAL);
(*
  OPERATION:
    Sets the specified range of bits in the set.
*)

PROCEDURE SCSlash(VAR x:  aFakeSet; y: aFakeSet);
(*
  OPERATION:
    This procedure carries out the standard M2 set operation for the "/"
    symbol, which is EOR.

    It EORs the two sets represented by 'x' and 'y', placing the result in 'x'.
*)

PROCEDURE SCTimes(VAR x:  aFakeSet; y: aFakeSet);
(*
  OPERATION:
    This procedure carries out the standard M2 set operation for the "*"
    symbol, which is AND.

    It ANDs the two sets represented by 'x' and 'y', placing the result in 'x'.
*)

END M2Sets.
