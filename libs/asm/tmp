    CASE    ON
    LONGA   ON
    LONGI   ON
    65816   ON
    OBJCASE ON
    DATACHK OFF
    GEN     ON

    MCOPY 23/interfaces/asm/tmp.macros
    COPY 13/ainclude/e16.sane

****************************************************************
*
*  ~M2FormatReal - convert an extended SANE number to a string
*
*  Inputs:
*        ext - extended format real number
*        fw - field width
*        decDig - fixed precision digit count
*        len - length of result buffer
*        adr - address of result buffer
*
*  Outputs:
*        passtring - string with leading length byte
*
****************************************************************
*
~M2FormatReal start
         longa on
         longi on

         sub   (10:ext,2:fw,2:decDig,2:len,4:adr),0
         phb
         phk
         plb

         lda   len
         inc   a
         cmp   fw
         bpl   oklen
         sta   fw
oklen    anop

         lda   decDig                   if exponential format then
         bne   lb3
         stz   style                      set style to exponential
         sec                              set # sig digits
         lda   fw
         bmi   lb1
         sbc   #7
         bmi   lb1
         cmp   #2
         bge   lb2
lb1      lda   #2
lb2      sta   digits
         bra   lb4                      else
lb3      sta   digits                     set # decimal digits
         lda   #1                         set style to fixed
         sta   style
lb4      anop                           endif

         ph4   #decForm                 convert to decimal record
         ph2   #0
         clc
         tdc
         adc   #ext
         pha
         ph4   #decRec
         fx2dec
         ph4   #decForm                 convert to string
         ph4   #decRec
         ph4   #pasString
         fdec2str
         lda   decDig                   if exponential format then
         bne   lb7
         short I,M
         ldx   pasString                  if format is e+0 then
         lda   pasString-2,X
         cmp   #'e'
         bne   lb5
         lda   pasString,X                  make it e+00
         sta   pasString+1,X
         lda   #'0'
         sta   pasString,X
         inc   pasString
lb5      anop                             endif
         ldx   pasString                  if format is e+00 then
         lda   pasString-3,X
         cmp   #'e'
         bne   lb6
         lda   pasString,X                  make it e+000
         sta   pasString+1,X
         lda   pasString-1,X
         sta   pasString,X
         lda   #'0'
         sta   pasString-1,X
         inc   pasString
lb6      anop                             endif
         long  I,M
lb7      anop                           endif

         lda   #80                      if fw > 80 then fw := 80;
         cmp   fw
         bge   lb8
         sta   fw
lb8      anop
lb9      lda   pasString                while len(string) < fw do
         and   #$00FF
         cmp   fw
         bge   lb11
         short I,M                        insert(' ',string);
         ldx   pasString
lb10     lda   pasString,X
         sta   pasString+1,X
         dex
         bne   lb10
         lda   #' '
         sta   pasString+1
         inc   pasString
         long  I,M
         bra   lb9
lb11     anop

         short  I,M
         ldy    pasString
lb12     lda    pasString,Y
         dey
         sta    [adr],Y
         cpy    #0
         bne    lb12

         ldy    pasString
         cpy    len
         bcc    termit
         bne    lb13

termit   anop
         lda    #0
         sta    [adr],y

lb13     anop
         long  I,M
         plb

         return

decForm  anop                           decForm record
style    ds    2                        0 -> exponential; 1 -> fixed
digits   ds    2                        significant digits; decimal digits

decRec   anop                           decimal record
sgn      ds    2                        sign
exp      ds    2                        exponent
sig      ds    29                       significant digits

pasString ds   81                       printable string

         end ~M2FormatReal
